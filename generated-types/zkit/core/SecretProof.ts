/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */

import {
  CircuitZKit,
  CircuitZKitConfig,
  Groth16Proof,
  PlonkProof,
  Groth16ProofPoints,
  PlonkProofPoints,
  NumberLike,
  NumericString,
  PublicSignals,
  Groth16Implementer,
  PlonkImplementer,
} from "@solarity/zkit";

import { normalizePublicSignals, denormalizePublicSignals } from "../helpers";

export type PrivateSecretProofGroth16 = {
  secret: NumberLike;
  commitment: NumberLike;
};

export type PublicSecretProofGroth16 = {
  isValid: NumberLike;
};

export type ProofSecretProofGroth16 = {
  proof: Groth16Proof;
  publicSignals: PublicSecretProofGroth16;
};

export type CalldataSecretProofGroth16 = {
  proofPoints: Groth16ProofPoints;
  publicSignals: [NumericString];
};

export type QualifiedSignalNames =
  | "main.isValid"
  | "main.secret"
  | "main.commitment"
  | "main.secretSquared"
  | "main.hash"
  | "main.eq.eq.in"
  | "main.eq.eq.inv";

export class SecretProof extends CircuitZKit<"groth16"> {
  constructor(config: CircuitZKitConfig) {
    super(config, new Groth16Implementer());
  }

  public async generateProof(
    inputs: PrivateSecretProofGroth16,
    witnessOverrides?: Partial<Record<QualifiedSignalNames, bigint>>,
  ): Promise<ProofSecretProofGroth16> {
    const proof = await super.generateProof(inputs as any, witnessOverrides);

    return {
      proof: proof.proof,
      publicSignals: this._normalizePublicSignals(proof.publicSignals),
    };
  }

  public async calculateWitness(
    inputs: PrivateSecretProofGroth16,
    witnessOverrides?: Partial<Record<QualifiedSignalNames, bigint>>,
  ): Promise<bigint[]> {
    return super.calculateWitness(inputs as any, witnessOverrides);
  }

  public async verifyProof(proof: ProofSecretProofGroth16): Promise<boolean> {
    return super.verifyProof({
      proof: proof.proof,
      publicSignals: this._denormalizePublicSignals(proof.publicSignals),
    });
  }

  public async generateCalldata(
    proof: ProofSecretProofGroth16,
  ): Promise<CalldataSecretProofGroth16> {
    return super.generateCalldata({
      proof: proof.proof,
      publicSignals: this._denormalizePublicSignals(proof.publicSignals),
    });
  }

  public getSignalNames(): string[] {
    return ["isValid"];
  }

  public getSignalDimensions(name: string): number[] {
    switch (name) {
      case "isValid":
        return [];
      default:
        throw new Error(`Unknown signal name: ${name}`);
    }
  }

  private _normalizePublicSignals(
    publicSignals: PublicSignals,
  ): PublicSecretProofGroth16 {
    return normalizePublicSignals(
      publicSignals,
      this.getSignalNames(),
      this.getSignalDimensions,
    );
  }

  private _denormalizePublicSignals(
    publicSignals: PublicSecretProofGroth16,
  ): PublicSignals {
    return denormalizePublicSignals(publicSignals, this.getSignalNames());
  }
}

export default SecretProof;
